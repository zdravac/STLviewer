from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QFileDialog, QMenuBar, QStatusBar, QToolBar, QTreeView,
    QDockWidget, QMessageBox, QLabel, QColorDialog, QSpinBox,
    QGroupBox, QCheckBox, QSlider, QWidgetAction
)
from PyQt6.QtGui import QAction, QKeySequence
from PyQt6.QtCore import Qt, QSettings
from .viewer import ModelViewer
from .settings_manager import SettingsManager
import sys
import os
import vtk
from vtk.qt.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # Initialize settings manager
        self.settings_manager = SettingsManager()
        
        # Create central widget with horizontal layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QHBoxLayout(central_widget)
        layout.setContentsMargins(0, 0, 0, 0)

        # Create VTK widget container
        viewer_container = QWidget()
        viewer_layout = QVBoxLayout(viewer_container)
        viewer_layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(viewer_container)

        # Create and setup VTK render window
        self.vtk_widget = QVTKRenderWindowInteractor(viewer_container)
        render_window = self.vtk_widget.GetRenderWindow()
        
        # Create renderer
        renderer = vtk.vtkRenderer()
        render_window.AddRenderer(renderer)
        
        # Configure renderer
        renderer.SetBackground(0.2, 0.2, 0.2)  # Dark gray background
        
        viewer_layout.addWidget(self.vtk_widget)
        
        # Initialize viewer with renderer
        self.viewer = ModelViewer(renderer)
        
        # Initialize light actions dictionary
        self.light_actions = {}
        
        # Create menus and toolbars
        self._create_status_bar()
        self._create_menu_bar()
        self._create_dock_widgets()
        
        # Apply saved settings
        self._apply_saved_settings()
        
        # Set window title
        self.setWindowTitle("STL Viewer")
        
        # Restore window geometry
        self.resize(800, 600)
        
        # Initialize interactor
        self.iren = self.vtk_widget.GetRenderWindow().GetInteractor()
        self.iren.Initialize()

    def _create_menu_bar(self):
        """Create the main menu bar"""
        menu_bar = self.menuBar()
        
        # File menu
        file_menu = menu_bar.addMenu("&File")
        
        # Exit action
        exit_action = QAction("E&xit", self)
        exit_action.setShortcut(Qt.Key.Key_Q | Qt.KeyboardModifier.ControlModifier)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Create appearance menu
        self._create_appearance_menu()

    def _create_status_bar(self):
        """Create the status bar"""
        self.statusBar().showMessage("Ready")

    def _create_dock_widgets(self):
        """Create dock widgets"""
        pass  # We removed the properties panel

    def _set_model_color(self):
        """Open color picker for model color"""
        color = QColorDialog.getColor()
        if color.isValid():
            rgb = color.getRgbF()[:3]
            self.viewer.set_model_color(rgb)
            self.settings_manager.update_settings(model_color=rgb)

    def _set_background_color(self):
        """Open color picker for background color"""
        color = QColorDialog.getColor()
        if color.isValid():
            rgb = color.getRgbF()[:3]
            self.viewer.set_background_color(rgb)
            self.settings_manager.update_settings(background_color=rgb)

    def _toggle_background_gradient(self, enabled):
        """Toggle background gradient"""
        self.viewer.set_background_gradient(enabled)
        self.settings_manager.update_settings(background_gradient=enabled)

    def _toggle_light(self, light_name, enabled):
        """Toggle a specific light source"""
        self.viewer.toggle_light(light_name, enabled)
        # Update settings
        light_states = self.settings_manager.settings.light_states.copy()
        light_states[light_name] = enabled
        self.settings_manager.update_settings(light_states=light_states)

    def _create_appearance_menu(self):
        """Create appearance menu for color and lighting controls"""
        appearance_menu = self.menuBar().addMenu("&Appearance")
        
        # Model color action
        model_color_action = QAction("Set Model Color...", self)
        model_color_action.triggered.connect(self._set_model_color)
        appearance_menu.addAction(model_color_action)
        appearance_menu.addSeparator()
        
        # Background color action
        bg_color_action = QAction("Set Background Color...", self)
        bg_color_action.triggered.connect(self._set_background_color)
        appearance_menu.addAction(bg_color_action)
        
        # Background gradient action
        bg_gradient_action = QAction("Enable Background Gradient", self)
        bg_gradient_action.setCheckable(True)
        bg_gradient_action.setChecked(self.settings_manager.settings.background_gradient)
        bg_gradient_action.triggered.connect(self._toggle_background_gradient)
        appearance_menu.addAction(bg_gradient_action)
        
        appearance_menu.addSeparator()
        
        # Lighting submenu
        lighting_menu = appearance_menu.addMenu("Lighting")
        
        # Light configurations
        light_configs = [
            ("ambient", "Ambient Light"),
            ("key", "Key Light"),
            ("fill", "Fill Light"),
            ("rim", "Rim Light")
        ]
        
        # Get light states from settings
        light_states = self.settings_manager.settings.light_states
        
        # Create light toggle actions
        for light_id, light_name in light_configs:
            action = QAction(light_name, self)
            action.setCheckable(True)
            action.setChecked(light_states.get(light_id, True))
            action.triggered.connect(
                lambda checked, lid=light_id: self._toggle_light(lid, checked)
            )
            lighting_menu.addAction(action)
            self.light_actions[light_id] = action
        
        # Add intensity slider
        lighting_menu.addSeparator()
        intensity_action = QWidgetAction(self)
        intensity_widget = QWidget()
        intensity_layout = QHBoxLayout(intensity_widget)
        intensity_layout.setContentsMargins(8, 4, 8, 4)
        
        intensity_label = QLabel("Intensity:", intensity_widget)
        intensity_layout.addWidget(intensity_label)
        
        self.intensity_slider = QSlider(Qt.Orientation.Horizontal, intensity_widget)
        self.intensity_slider.setMinimum(50)
        self.intensity_slider.setMaximum(200)
        initial_intensity = int(self.settings_manager.settings.light_intensity * 100)
        self.intensity_slider.setValue(initial_intensity)
        self.intensity_slider.setToolTip("Adjust overall light intensity")
        self.intensity_slider.valueChanged.connect(
            lambda v: self._set_light_intensity(v / 100)
        )
        intensity_layout.addWidget(self.intensity_slider)
        
        intensity_value_label = QLabel(f"{initial_intensity}%", intensity_widget)
        self.intensity_slider.valueChanged.connect(
            lambda v: intensity_value_label.setText(f"{v}%")
        )
        intensity_layout.addWidget(intensity_value_label)
        
        intensity_action.setDefaultWidget(intensity_widget)
        lighting_menu.addAction(intensity_action)

    def _set_light_intensity(self, intensity: float):
        """Set the overall light intensity"""
        self.viewer.set_light_intensity(intensity)
        self.settings_manager.update_settings(light_intensity=intensity)

    def _apply_saved_settings(self):
        """Apply saved settings from previous session"""
        settings = self.settings_manager.settings
        
        # Apply colors
        self.viewer.set_model_color(settings.model_color)
        self.viewer.set_background_color(settings.background_color)
        self.viewer.set_background_gradient(settings.background_gradient)
        
        # Apply light states
        for light_name, enabled in settings.light_states.items():
            if light_name in self.light_actions:
                self.light_actions[light_name].setChecked(enabled)
            self.viewer.toggle_light(light_name, enabled)
        
        # Apply light intensity
        if hasattr(self, 'intensity_slider'):
            self.intensity_slider.setValue(int(settings.light_intensity * 100))
        self.viewer.set_light_intensity(settings.light_intensity)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
